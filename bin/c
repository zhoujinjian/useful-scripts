#!/bin/bash
# @Function
# Run command and put output to system clipper.
#
# @Usage
#   $ c echo 'hello world!'
#   $ echo 'hello world!' | c
#
# @online-doc https://github.com/oldratlee/useful-scripts/blob/dev-2.x/docs/shell.md#-c
# @author Jerry Lee (oldratlee at gmail dot com)
#
# NOTE about Bash Traps and Pitfalls:
#
# 1. DO NOT combine var declaration and assignment which value supplied by subshell!
#    for example: readonly var1=$(echo value1)
#                 local var1=$(echo value1)
#
#    declaration make exit code of assignment to be always 0,
#      aka. the exit code of command in subshell is discarded.
#      tested on bash 3.2.57/4.2.46
set -eEuo pipefail

# NOTE: DO NOT declare var PROG as readonly, because its value is supplied by subshell.
PROG="$(basename "$0")"
readonly PROG_VERSION='2.4.0'

################################################################################
# util functions
################################################################################

readonly ec=$'\033'      # escape char
readonly eend=$'\033[0m' # escape end
readonly nl=$'\n'        # new line

redEcho() {
    [ -t 1 ] && echo "${ec}[1;31m$*$eend" || echo "$*"
}

usage() {
    local -r exit_code="${1:-0}"
    (($# > 0)) && shift
    # shellcheck disable=SC2015
    [ "$exit_code" != 0 ] && local -r out=/dev/stderr || local -r out=/dev/stdout

    (($# > 0)) && redEcho "$*$nl" >$out

    cat >$out <<EOF
Usage: ${PROG} [OPTION]... [command [command_args ...]]
Run command and put output to system clipper.
If no command is specified, read from stdin(pipe).

Example:
  ${PROG} echo "hello world!"
  ${PROG} grep -i 'hello world' menu.h main.c
  set | ${PROG}
  ${PROG} -q < ~/.ssh/id_rsa.pub

Options:
  -k, --keep-eol  do not trim new line at end of file
  -q, --quiet     suppress all normal output, default is false
  -h, --help      display this help and exit
  -V, --version   display version information and exit
EOF

    exit "$exit_code"
}

progVersion() {
    echo "$PROG $PROG_VERSION"
    exit
}

################################################################################
# parse options
################################################################################

quiet=false
eol=-n
declare -a args=()
while [ $# -gt 0 ]; do
    case "$1" in
    -k | --keep-eol)
        eol=
        shift
        ;;
    -q | --quiet)
        quiet=true
        shift
        ;;
    -h | --help)
        usage
        ;;
    -V | --version)
        progVersion
        ;;
    --)
        shift
        args=(${args[@]:+"${args[@]}"} "$@")
        break
        ;;
    -*)
        usage 2 "${PROG}: unrecognized option '$1'"
        ;;
    *)
        # if not option, treat all follow args as command
        args=(${args[@]:+"${args[@]}"} "$@")
        break
        ;;
    esac
done

################################################################################
# biz logic
################################################################################

copy() {
    case "$(uname)" in
    Darwin*)
        pbcopy
        ;;
    CYGWIN* | MINGW*)
        clip
        ;;
    *)
        xsel -b
        ;;
    esac
}

teeAndCopy() {
    # shellcheck disable=SC2015
    $quiet && local -r out=/dev/null || local -r out=/dev/stdout
    tee >(
        content="$(cat)"
        # shellcheck disable=SC2086
        echo $eol "$content" | copy
    ) >$out
}

if [ ${#args[@]} -eq 0 ]; then
    teeAndCopy
else
    "${args[@]}" | teeAndCopy
fi
